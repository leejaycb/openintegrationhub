{
  "openapi": "3.0.0",
  "info": {
    "description": "Component repository is a service used to manage components in the Open Integration Hub.",
    "version": "1.0.0",
    "title": "Component Repository",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "components",
      "description": "Component management"
    }
  ],
  "paths": {
    "/components/": {
      "get": {
        "tags": ["components"],
        "summary": "Retrieve all components",
        "description": "Retrieve all components from the repository.",
        "operationId": "getComponents",
        "parameters": [
          {
            "name": "page[size]",
            "description": "The amount of components per page returned. Defaults to 50.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[number]",
            "description": "The number of the page to be returned. Defaults to 1.",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MutableComponent"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/Meta"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": ["components"],
        "summary": "Create a component",
        "description": "Create a component",
        "operationId": "createComponent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableComponent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MutableComponent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/components/{id}": {
      "get": {
        "tags": ["components"],
        "summary": "Find component by ID",
        "description": "Returns a component with given ID",
        "operationId": "getComponentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of component to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MutableComponent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      },
      "patch": {
        "tags": ["components"],
        "summary": "Update a component",
        "description": "Update a component",
        "operationId": "updateComponent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of component to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableComponent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MutableComponent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      },
      "delete": {
        "tags": ["components"],
        "summary": "Delete a component",
        "description": "Delete a component",
        "operationId": "deleteComponent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of component to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The component was deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      }
    },
    "/components/global/{id}/start": {
      "post": {
        "tags": ["components"],
        "summary": "Start a global component by ID",
        "description": "Returns a success message",
        "operationId": "startGlobalComponentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of global component to start",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/GlobalComponentStart"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      }
    },
    "/components/global/{id}/stop": {
      "post": {
        "tags": ["components"],
        "summary": "Stop a global component by ID",
        "description": "Returns a success message",
        "operationId": "stopGlobalComponentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of global component to stop",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/GlobalComponentStop"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      }
    },
    "/components/enrich/{id}": {
      "patch": {
        "tags": ["components"],
        "summary": "Automatically enrich component metadata",
        "description": "Fetches component data from its repository, if available",
        "operationId": "enrichComponent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of global component to stop",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "query",
            "description": "Absolute url of component repository. Will use component's saved repository if none is provided",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Operation"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Component with given ID not found"
          }
        }
      }
    },
    "/virtual-components/": {
      "get": {
        "tags": ["virtualComponents"],
        "summary": "Retrieve all virtualComponents",
        "description": "Retrieve all virtualComponents from the repository.",
        "operationId": "getVirtualComponents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VirtualComponent"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["virtualComponents"],
        "summary": "Create a virtual component",
        "description": "Create a virtual component",
        "operationId": "createVirtualComponent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualComponent"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/VirtualComponent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/virtual-components/defaults": {
      "get": {
        "tags": ["virtualComponents"],
        "summary": "Retrieve all default component versions",
        "description": "Retrieve all default component versions from the repository.",
        "operationId": "getDefaultComponentVersion",
        "parameters": [
          {
            "name": "verbose",
            "description": "If you want to retrieve all data from the components. Default is true",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filterActiveFunctions",
            "description": "If you want to filter the active triggers and actions all. Default is false",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/ComponentVersion"
                          },
                          {
                            "$ref": "#/components/schemas/VirtualComponent"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/virtual-components/config": {
      "get": {
        "tags": ["virtualComponents"],
        "summary": "Retrieve the configuration of the default component versions",
        "description": "Retrieve the configuration of the default component versions.",
        "operationId": "getConfigDefaultComponentVersions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ComponentConfig"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/virtual-components/{id}": {
      "get": {
        "tags": ["virtualComponents"],
        "summary": "Get specific virtual component",
        "description": "Get specific virtual component from the repository.",
        "operationId": "getVirtualComponentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of virtual component to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/VirtualComponent"
                    }
                  }
                }
              }
            }
          }
        },
        "403": {
          "$ref": "#/components/responses/UnauthorizedError"
        },
        "404": {
          "description": "VirtualComponent is not found"
        }
      },
      "patch": {
        "tags": ["virtualComponents"],
        "summary": "Partial update of a virtual component",
        "description": "Partial update of a virtual component",
        "operationId": "patchVirtualComponent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualComponent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/VirtualComponent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "VirtualComponent is not found"
          }
        }
      },
      "delete": {
        "tags": ["virtualComponents"],
        "summary": "Delete a virtual component",
        "description": "Delete a virtual component",
        "operationId": "deleteVirtualComponent",
        "responses": {
          "204": {
            "description": "Resource removed"
          },
          "403": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "VirtualComponent is not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Token issued by IAM"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    },
    "schemas": {
      "MutableComponent": {
        "type": "object",
        "required": ["name", "distribution"],
        "properties": {
          "name": {
            "type": "string",
            "example": "My Component"
          },
          "description": {
            "type": "string",
            "example": "My Component"
          },
          "id": {
            "type": "string",
            "description": "Unique component ID"
          },
          "access": {
            "type": "string",
            "enum": ["private", "public"],
            "default": "private",
            "example": "public"
          },
          "applicationUid": {
            "type": "string",
            "description": "Unique application ID",
            "example": "3f57d4cc-9a6b-40c9-8db6-0657c116e97c"
          },
          "logo": {
            "type": "string",
            "description": "Component Logo URL",
            "example": "https://my-component.com/logo.png"
          },
          "descriptor": {
            "type": "object",
            "description": "Component descriptor (component.json) which contains a component meta information."
          },
          "distribution": {
            "$ref": "#/components/schemas/ComponentDistribution"
          },
          "isGlobal": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Owner"
            }
          }
        }
      },
      "ComponentDistribution": {
        "allOf": [
          {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["docker", "slug"]
              }
            }
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ComponentDockerDistribution"
              },
              {
                "$ref": "#/components/schemas/ComponentSlugDistribution"
              }
            ]
          }
        ],
        "example": {
          "type": "docker",
          "image": "openintegrationhub/email",
          "registrySecretId": "5b62c919fd98ea00112d52e7"
        }
      },
      "ComponentDockerDistribution": {
        "type": "object",
        "required": ["image"],
        "properties": {
          "image": {
            "type": "string",
            "description": "Docker image",
            "example": "openintegrationhub/email:v1.0.0"
          },
          "registrySecretId": {
            "type": "string",
            "description": "ID of a secret, which contains Docker registry credentials",
            "example": "5b62c919fd98ea00112d52e7"
          }
        }
      },
      "ComponentSlugDistribution": {
        "type": "object",
        "required": ["slugUrl"],
        "properties": {
          "slugUrl": {
            "type": "string",
            "description": "URL to a slug, containing a compomponent source code"
          }
        }
      },
      "Owner": {
        "type": "object",
        "required": ["id", "type"],
        "properties": {
          "id": {
            "type": "string",
            "description": "External id of the owner",
            "example": "123"
          },
          "type": {
            "type": "string",
            "description": "Type to discriminate owner's type",
            "example": "user"
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page (1-based numbering)"
          },
          "perPage": {
            "type": "integer",
            "description": "Number of objects per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "GlobalComponentStart": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Component started"
          },
          "code": {
            "type": "string",
            "example": 200
          }
        }
      },
      "GlobalComponentStop": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Component stopped"
          },
          "code": {
            "type": "string",
            "example": 200
          }
        }
      },
      "Version": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "description": "External id of the componentVersion",
            "example": "123"
          },
          "componentVersion": {
            "type": "string",
            "description": "Component version",
            "example": "49"
          },
          "apiVersion": {
            "type": "string",
            "description": "Official component version",
            "example": "2.0.1"
          }
        }
      },
      "VirtualComponent": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the virtual component",
            "example": "Slack"
          },
          "defaultVersionId": {
            "type": "string",
            "description": "External Id of the component version. To know the default/active component version",
            "example": "123"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            }
          },
          "tenant": {
            "type": "string",
            "description": "Tenant id of the logged user",
            "example": "1234"
          },
          "access": {
            "type": "string",
            "enum": ["private", "public"],
            "default": "private",
            "example": "public"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Owner"
            }
          },
          "active": {
            "type": "boolean",
            "default": "true",
            "example": "false"
          }
        }
      },
      "ComponentConfig": {
        "type": "object",
        "required": ["componentVersionId"],
        "properties": {
          "componentVersionId": {
            "type": "string",
            "description": "External id of the component version",
            "example": "123"
          },
          "authClientId": {
            "type": "string",
            "description": "External id of the auth client from the secret-service",
            "example": "123"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant id of the logged user",
            "example": "123"
          }
        }
      },
      "Function": {
        "type": "object",
        "required": ["name", "function"],
        "properties": {
          "name": {
            "type": "string",
            "example": "123"
          },
          "title": {
            "type": "string",
            "example": "123"
          },
          "description": {
            "type": "string",
            "example": "123"
          },
          "function": {
            "type": "string",
            "description": "Not used yet but it can be used to store the function to execute when this action/trigger is invoked",
            "example": "processAction"
          },
          "fields": {
            "type": "object",
            "description": "Can be used to store different fields that this fuunction needs."
          },
          "schemas": {
            "type": "object",
            "properties": {
              "in": {
                "type": "object",
                "description": "The input schema from the function."
              },
              "out": {
                "type": "object",
                "description": "The output schema from the function."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "Used to filter active functions."
          }
        }
      },
      "LightFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "123"
          },
          "title": {
            "type": "string",
            "example": "123"
          },
          "description": {
            "type": "string",
            "example": "123"
          },
          "active": {
            "type": "boolean",
            "description": "Used to filter active functions."
          }
        }
      },
      "LightComponentVersion": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Slack component"
          },
          "authorization": {
            "type": "object",
            "properties": {
              "authType": {
                "type": "string",
                "enum": [
                  "NO_AUTH",
                  "API_KEY",
                  "OA1_TWO_LEGGED",
                  "OA1_THREE_LEGGED",
                  "OA2_AUTHORIZATION_CODE",
                  "SIMPLE",
                  "MIXED",
                  "SESSION_AUTH"
                ],
                "example": "NO_AUTH"
              },
              "authSetupLink": {
                "type": "string",
                "example": "http://domain.com/api/doc"
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "External id of the virtual component",
            "example": "123"
          },
          "description": {
            "type": "string"
          },
          "componentId": {
            "type": "string",
            "description": "External id of the component",
            "example": "123"
          },
          "virtualComponentId": {
            "type": "string",
            "description": "External id of the virtual component",
            "example": "123"
          },
          "actions": {
            "type": "array",
            "$ref": "#/components/schemas/LightFunction"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LightFunction"
            }
          }
        }
      },
      "ComponentVersion": {
        "type": "object",
        "required": [
          "name",
          "componentId",
          "virtualComponentId",
          "authorization.authType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Slack component"
          },
          "description": {
            "type": "string"
          },
          "componentId": {
            "type": "string",
            "description": "External id of the component",
            "example": "123"
          },
          "authorization": {
            "type": "object",
            "properties": {
              "authType": {
                "type": "string",
                "enum": [
                  "NO_AUTH",
                  "API_KEY",
                  "OA1_TWO_LEGGED",
                  "OA1_THREE_LEGGED",
                  "OA2_AUTHORIZATION_CODE",
                  "SIMPLE",
                  "MIXED",
                  "SESSION_AUTH"
                ],
                "example": "NO_AUTH"
              },
              "authSetupLink": {
                "type": "string",
                "example": "http://domain.com/api/doc"
              }
            }
          },
          "actions": {
            "type": "array",
            "$ref": "#/components/schemas/Function"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            }
          },
          "virtualComponentId": {
            "type": "string",
            "description": "External id of the virtual component",
            "example": "123"
          },
          "logo": {
            "type": "string",
            "description": "External id of the virtual component",
            "example": "123"
          }
        }
      }
    }
  }
}
